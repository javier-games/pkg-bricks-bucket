using System;
using System.Collections.Generic;

/// <summary>
/// Registered types.
/// 
/// Since iOS cannot support System.Reflection, DynRef has to
/// have this static class to cast values.
/// 
/// 
/// <autogenerated>
/// 
/// This code was generated by a tool.
/// Changes to this file may cause incorrect behavior and will
/// be lost if the code is regenerated.
/// 
/// </autogenerated>
/// 
/// ----------------------------------------------------------
/// Code generated on Tuesday, 21 August 2018 12:12:29
/// ----------------------------------------------------------
///
/// By Javier Garc√≠a.
/// </summary>
public static class RegisteredTypes {

	/// <summary> Quickly view of all registered types. </summary>
	private static readonly List<Type> typesList = new List<Type>{
		typeof(UnityEngine.GameObject),
		typeof(UnityEngine.Transform)
	};

	/// <summary> The set. </summary>
	private static readonly
	Dictionary<string, Dictionary<string, Action<object, object>>> set =
		new Dictionary<string, Dictionary<string, Action<object, object>>> {
		{
			#region UnityEngine.GameObject
			"UnityEngine.GameObject",
			new Dictionary<string, Action<object, object>>{
				{"layer", (component, value) => (component as UnityEngine.GameObject).layer = (System.Int32)value},
				{"isStatic", (component, value) => (component as UnityEngine.GameObject).isStatic = (System.Boolean)value},
				{"tag", (component, value) => (component as UnityEngine.GameObject).tag = (System.String)value},
				{"name", (component, value) => (component as UnityEngine.GameObject).name = (System.String)value},
				{"hideFlags", (component, value) => (component as UnityEngine.GameObject).hideFlags = (UnityEngine.HideFlags)value}
			}
			#endregion
		},
		{
			#region UnityEngine.Transform
			"UnityEngine.Transform",
			new Dictionary<string, Action<object, object>>{
				{"position", (component, value) => (component as UnityEngine.Transform).position = (UnityEngine.Vector3)value},
				{"localPosition", (component, value) => (component as UnityEngine.Transform).localPosition = (UnityEngine.Vector3)value},
				{"eulerAngles", (component, value) => (component as UnityEngine.Transform).eulerAngles = (UnityEngine.Vector3)value},
				{"localEulerAngles", (component, value) => (component as UnityEngine.Transform).localEulerAngles = (UnityEngine.Vector3)value},
				{"right", (component, value) => (component as UnityEngine.Transform).right = (UnityEngine.Vector3)value},
				{"up", (component, value) => (component as UnityEngine.Transform).up = (UnityEngine.Vector3)value},
				{"forward", (component, value) => (component as UnityEngine.Transform).forward = (UnityEngine.Vector3)value},
				{"rotation", (component, value) => (component as UnityEngine.Transform).rotation = (UnityEngine.Quaternion)value},
				{"localRotation", (component, value) => (component as UnityEngine.Transform).localRotation = (UnityEngine.Quaternion)value},
				{"localScale", (component, value) => (component as UnityEngine.Transform).localScale = (UnityEngine.Vector3)value},
				{"parent", (component, value) => (component as UnityEngine.Transform).parent = (UnityEngine.Transform)value},
				{"hasChanged", (component, value) => (component as UnityEngine.Transform).hasChanged = (System.Boolean)value},
				{"hierarchyCapacity", (component, value) => (component as UnityEngine.Transform).hierarchyCapacity = (System.Int32)value},
				{"tag", (component, value) => (component as UnityEngine.Transform).tag = (System.String)value},
				{"name", (component, value) => (component as UnityEngine.Transform).name = (System.String)value},
				{"hideFlags", (component, value) => (component as UnityEngine.Transform).hideFlags = (UnityEngine.HideFlags)value}
			}
			#endregion
		}
	};

	/// <summary> The get. </summary>
	private static readonly
	Dictionary<string, Dictionary<string, Func<object, object>>> get =
		new Dictionary<string, Dictionary<string, Func<object, object>>> {
		{
			#region UnityEngine.GameObject
			"UnityEngine.GameObject",
			new Dictionary<string, Func<object, object>>{
				{"layer", (component) => (component as UnityEngine.GameObject).layer},
				{"isStatic", (component) => (component as UnityEngine.GameObject).isStatic},
				{"tag", (component) => (component as UnityEngine.GameObject).tag},
				{"name", (component) => (component as UnityEngine.GameObject).name},
				{"hideFlags", (component) => (component as UnityEngine.GameObject).hideFlags}
			}
			#endregion
		},
		{
			#region UnityEngine.Transform
			"UnityEngine.Transform",
			new Dictionary<string, Func<object, object>>{
				{"position", (component) => (component as UnityEngine.Transform).position},
				{"localPosition", (component) => (component as UnityEngine.Transform).localPosition},
				{"eulerAngles", (component) => (component as UnityEngine.Transform).eulerAngles},
				{"localEulerAngles", (component) => (component as UnityEngine.Transform).localEulerAngles},
				{"right", (component) => (component as UnityEngine.Transform).right},
				{"up", (component) => (component as UnityEngine.Transform).up},
				{"forward", (component) => (component as UnityEngine.Transform).forward},
				{"rotation", (component) => (component as UnityEngine.Transform).rotation},
				{"localRotation", (component) => (component as UnityEngine.Transform).localRotation},
				{"localScale", (component) => (component as UnityEngine.Transform).localScale},
				{"parent", (component) => (component as UnityEngine.Transform).parent},
				{"hasChanged", (component) => (component as UnityEngine.Transform).hasChanged},
				{"hierarchyCapacity", (component) => (component as UnityEngine.Transform).hierarchyCapacity},
				{"tag", (component) => (component as UnityEngine.Transform).tag},
				{"name", (component) => (component as UnityEngine.Transform).name},
				{"hideFlags", (component) => (component as UnityEngine.Transform).hideFlags}
			}
			#endregion
		}
	};

	/// <summary>  the array of types. </summary>
	/// <value>The array.</value>
	public static Type[] Array {
		get { return typesList.ToArray (); }
	}
	
	/// <summary> Containses the component. </summary>
	/// <returns><c>true</c>, if component was containsed.</returns>
	/// <param name="component">Component.</param>
	public static bool ContainsComponent(string component){
		return
		set.ContainsKey (component) &&
		get.ContainsKey (component);
	}
	
	/// <summary> Containses the property. </summary>
	/// <returns><c>true</c>, if property was containsed.</returns>
	/// <param name="component">Component.</param>
	/// <param name="property">Property name.</param>
	public static bool ContainsProperty(string component, string property) {
		return
			set[component].ContainsKey (property) &&
			get[component].ContainsKey (property);
	}
	
	/// <summary> Gets the value. </summary>
	/// <returns>The value.</returns>
	/// <param name="component">Component.</param>
	/// <param name="property">Property name.</param>
	public static object GetValue(object component, string property) {
		try {
			return get[component.GetType ().ToString ()][property] (component);
		}
		catch(Exception exception){
			UnityEngine.Debug.LogError (exception);
			return null;
		}
	}
	
	/// <summary> Sets the value. </summary>
	/// <param name="component">Component.</param>
	/// <param name="property">Property name.</param>
	/// <param name="value">Value.</param>
	public static void SetValue (object component, string property, object value) {
		try {
			set[component.GetType ().ToString ()][property] (component, value);
		}
		catch (Exception exception) {
			UnityEngine.Debug.LogError (exception);
		}
	}
}