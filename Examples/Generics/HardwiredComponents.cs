using System;
using System.Collections.Generic;

// ReSharper disable PossibleNullReferenceException
// ReSharper disable BuiltInTypeReferenceStyle
// ReSharper disable UnusedMember.Local
// ReSharper disable RedundantNameQualifier

namespace Monogum.BricksBucket.Core.Examples.Generics
{
    /// <summary>
    /// Registered types.
    /// 
    /// Since iOS cannot support System.Reflection, AbstractReference has to
    /// have this static class to cast values.
    /// 
    /// 
    /// <autogenerated>
    /// 
    /// This code was generated by a tool.
    /// Changes to this file may cause incorrect behavior and will
    /// be lost if the code is regenerated.
    /// 
    /// </autogenerated>
    /// 
    /// ----------------------------------------------------------
    /// Code generated on Tuesday, January 12, 2021 5:50:36 PM
    /// ----------------------------------------------------------
    ///
    /// By Javier Garc√≠a.
    /// </summary>
    public sealed class HardwiredComponents :
        BricksBucket.Core.Generics.AbstractComponentRegistry
    {
        /// <inheritdoc cref="BricksBucket.Core.Generics.AbstractComponentRegistry.NameSpace"/>
        public override string NameSpace =>
            "Monogum.BricksBucket.Core.Examples.Generics";

        /// <inheritdoc cref="BricksBucket.Core.Generics.AbstractComponentRegistry.Path"/>
        public override string Path => "BricksBucket/Core/Examples/Generics";

        /// <inheritdoc cref="BricksBucket.Core.Generics.AbstractComponentRegistry.ClassName"/>
        public override string ClassName => "HardwiredComponents";

        /// <inheritdoc cref="BricksBucket.Core.Generics.AbstractComponentRegistry.Extension"/>
        public override string Extension => "cs";

        /// <inheritdoc cref="BricksBucket.Core.Generics.AbstractComponentRegistry.ComponentTypesList"/>
        protected override List<Type> ComponentTypesList { get; } =
            new List<Type>
            {

                typeof(UnityEngine.RectTransform),

                typeof(UnityEngine.Transform),

                typeof(UnityEngine.UI.Image)
            };

        /// <inheritdoc cref="BricksBucket.Core.Generics.AbstractComponentRegistry.Set"/>
        protected override
            Dictionary<Type, Dictionary<string, Action<object, object>>> Set
        {
            get;
        } = new Dictionary<Type, Dictionary<string, Action<object, object>>>
        {

            {
                #region UnityEngine.RectTransform

                typeof(UnityEngine.RectTransform),
                new Dictionary<string, Action<object, object>>
                {

                    {
                        "anchorMin",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).anchorMin =
                            (UnityEngine.Vector2) value
                    },
                    {
                        "anchorMax",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).anchorMax =
                            (UnityEngine.Vector2) value
                    },
                    {
                        "anchoredPosition",
                        (component, value) =>
                            (component as UnityEngine.RectTransform)
                            .anchoredPosition =
                            (UnityEngine.Vector2) value
                    },
                    {
                        "sizeDelta",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).sizeDelta =
                            (UnityEngine.Vector2) value
                    },
                    {
                        "pivot",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).pivot =
                            (UnityEngine.Vector2) value
                    },
                    {
                        "anchoredPosition3D",
                        (component, value) =>
                            (component as UnityEngine.RectTransform)
                            .anchoredPosition3D =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "offsetMin",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).offsetMin =
                            (UnityEngine.Vector2) value
                    },
                    {
                        "offsetMax",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).offsetMax =
                            (UnityEngine.Vector2) value
                    },
                    {
                        "position",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).position =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "localPosition",
                        (component, value) =>
                            (component as UnityEngine.RectTransform)
                            .localPosition =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "eulerAngles",
                        (component, value) =>
                            (component as UnityEngine.RectTransform)
                            .eulerAngles =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "localEulerAngles",
                        (component, value) =>
                            (component as UnityEngine.RectTransform)
                            .localEulerAngles =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "right",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).right =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "up",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).up =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "forward",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).forward =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "rotation",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).rotation =
                            (UnityEngine.Quaternion) value
                    },
                    {
                        "localRotation",
                        (component, value) =>
                            (component as UnityEngine.RectTransform)
                            .localRotation =
                            (UnityEngine.Quaternion) value
                    },
                    {
                        "localScale",
                        (component, value) =>
                            (component as UnityEngine.RectTransform)
                            .localScale =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "parent",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).parent =
                            (UnityEngine.Transform) value
                    },
                    {
                        "hasChanged",
                        (component, value) =>
                            (component as UnityEngine.RectTransform)
                            .hasChanged =
                            (System.Boolean) value
                    },
                    {
                        "hierarchyCapacity",
                        (component, value) =>
                            (component as UnityEngine.RectTransform)
                            .hierarchyCapacity =
                            (System.Int32) value
                    },
                    {
                        "tag",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).tag =
                            (System.String) value
                    },
                    {
                        "name",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).name =
                            (System.String) value
                    },
                    {
                        "hideFlags",
                        (component, value) =>
                            (component as UnityEngine.RectTransform).hideFlags =
                            (UnityEngine.HideFlags) value
                    }
                }

                #endregion
            },

            {
                #region UnityEngine.Transform

                typeof(UnityEngine.Transform),
                new Dictionary<string, Action<object, object>>
                {

                    {
                        "position",
                        (component, value) =>
                            (component as UnityEngine.Transform).position =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "localPosition",
                        (component, value) =>
                            (component as UnityEngine.Transform).localPosition =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "eulerAngles",
                        (component, value) =>
                            (component as UnityEngine.Transform).eulerAngles =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "localEulerAngles",
                        (component, value) =>
                            (component as UnityEngine.Transform)
                            .localEulerAngles =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "right",
                        (component, value) =>
                            (component as UnityEngine.Transform).right =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "up",
                        (component, value) =>
                            (component as UnityEngine.Transform).up =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "forward",
                        (component, value) =>
                            (component as UnityEngine.Transform).forward =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "rotation",
                        (component, value) =>
                            (component as UnityEngine.Transform).rotation =
                            (UnityEngine.Quaternion) value
                    },
                    {
                        "localRotation",
                        (component, value) =>
                            (component as UnityEngine.Transform).localRotation =
                            (UnityEngine.Quaternion) value
                    },
                    {
                        "localScale",
                        (component, value) =>
                            (component as UnityEngine.Transform).localScale =
                            (UnityEngine.Vector3) value
                    },
                    {
                        "parent",
                        (component, value) =>
                            (component as UnityEngine.Transform).parent =
                            (UnityEngine.Transform) value
                    },
                    {
                        "hasChanged",
                        (component, value) =>
                            (component as UnityEngine.Transform).hasChanged =
                            (System.Boolean) value
                    },
                    {
                        "hierarchyCapacity",
                        (component, value) =>
                            (component as UnityEngine.Transform)
                            .hierarchyCapacity =
                            (System.Int32) value
                    },
                    {
                        "tag",
                        (component, value) =>
                            (component as UnityEngine.Transform).tag =
                            (System.String) value
                    },
                    {
                        "name",
                        (component, value) =>
                            (component as UnityEngine.Transform).name =
                            (System.String) value
                    },
                    {
                        "hideFlags",
                        (component, value) =>
                            (component as UnityEngine.Transform).hideFlags =
                            (UnityEngine.HideFlags) value
                    }
                }

                #endregion
            },

            {
                #region UnityEngine.UI.Image

                typeof(UnityEngine.UI.Image),
                new Dictionary<string, Action<object, object>>
                {

                    {
                        "sprite",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).sprite =
                            (UnityEngine.Sprite) value
                    },
                    {
                        "overrideSprite",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).overrideSprite =
                            (UnityEngine.Sprite) value
                    },
                    {
                        "type",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).type =
                            (UnityEngine.UI.Image.Type) value
                    },
                    {
                        "preserveAspect",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).preserveAspect =
                            (System.Boolean) value
                    },
                    {
                        "fillCenter",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).fillCenter =
                            (System.Boolean) value
                    },
                    {
                        "fillMethod",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).fillMethod =
                            (UnityEngine.UI.Image.FillMethod) value
                    },
                    {
                        "fillAmount",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).fillAmount =
                            (System.Single) value
                    },
                    {
                        "fillClockwise",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).fillClockwise =
                            (System.Boolean) value
                    },
                    {
                        "fillOrigin",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).fillOrigin =
                            (System.Int32) value
                    },
                    {
                        "alphaHitTestMinimumThreshold",
                        (component, value) =>
                            (component as UnityEngine.UI.Image)
                            .alphaHitTestMinimumThreshold =
                            (System.Single) value
                    },
                    {
                        "useSpriteMesh",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).useSpriteMesh =
                            (System.Boolean) value
                    },
                    {
                        "pixelsPerUnitMultiplier",
                        (component, value) =>
                            (component as UnityEngine.UI.Image)
                            .pixelsPerUnitMultiplier =
                            (System.Single) value
                    },
                    {
                        "material",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).material =
                            (UnityEngine.Material) value
                    },
                    {
                        "onCullStateChanged",
                        (component, value) =>
                            (component as UnityEngine.UI.Image)
                            .onCullStateChanged =
                            (UnityEngine.UI.MaskableGraphic.
                                CullStateChangedEvent) value
                    },
                    {
                        "maskable",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).maskable =
                            (System.Boolean) value
                    },
                    {
                        "isMaskingGraphic",
                        (component, value) =>
                            (component as UnityEngine.UI.Image)
                            .isMaskingGraphic =
                            (System.Boolean) value
                    },
                    {
                        "color",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).color =
                            (UnityEngine.Color) value
                    },
                    {
                        "raycastTarget",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).raycastTarget =
                            (System.Boolean) value
                    },
                    {
                        "raycastPadding",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).raycastPadding =
                            (UnityEngine.Vector4) value
                    },
                    {
                        "useGUILayout",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).useGUILayout =
                            (System.Boolean) value
                    },
                    {
                        "runInEditMode",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).runInEditMode =
                            (System.Boolean) value
                    },
                    {
                        "enabled",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).enabled =
                            (System.Boolean) value
                    },
                    {
                        "tag",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).tag =
                            (System.String) value
                    },
                    {
                        "name",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).name =
                            (System.String) value
                    },
                    {
                        "hideFlags",
                        (component, value) =>
                            (component as UnityEngine.UI.Image).hideFlags =
                            (UnityEngine.HideFlags) value
                    }
                }

                #endregion
            }
        };

        /// <inheritdoc cref="BricksBucket.Core.Generics.AbstractComponentRegistry.Get"/>
        protected override
            Dictionary<Type, Dictionary<string, Func<object, object>>> Get
        {
            get;
        } = new Dictionary<Type, Dictionary<string, Func<object, object>>>
        {

            {
                #region UnityEngine.RectTransform

                typeof(UnityEngine.RectTransform),
                new Dictionary<string, Func<object, object>>
                {

                    {
                        "anchorMin",
                        (component) =>
                            (component as UnityEngine.RectTransform).anchorMin
                    },
                    {
                        "anchorMax",
                        (component) =>
                            (component as UnityEngine.RectTransform).anchorMax
                    },
                    {
                        "anchoredPosition",
                        (component) =>
                            (component as UnityEngine.RectTransform)
                            .anchoredPosition
                    },
                    {
                        "sizeDelta",
                        (component) =>
                            (component as UnityEngine.RectTransform).sizeDelta
                    },
                    {
                        "pivot",
                        (component) =>
                            (component as UnityEngine.RectTransform).pivot
                    },
                    {
                        "anchoredPosition3D",
                        (component) =>
                            (component as UnityEngine.RectTransform)
                            .anchoredPosition3D
                    },
                    {
                        "offsetMin",
                        (component) =>
                            (component as UnityEngine.RectTransform).offsetMin
                    },
                    {
                        "offsetMax",
                        (component) =>
                            (component as UnityEngine.RectTransform).offsetMax
                    },
                    {
                        "position",
                        (component) =>
                            (component as UnityEngine.RectTransform).position
                    },
                    {
                        "localPosition",
                        (component) =>
                            (component as UnityEngine.RectTransform)
                            .localPosition
                    },
                    {
                        "eulerAngles",
                        (component) =>
                            (component as UnityEngine.RectTransform).eulerAngles
                    },
                    {
                        "localEulerAngles",
                        (component) =>
                            (component as UnityEngine.RectTransform)
                            .localEulerAngles
                    },
                    {
                        "right",
                        (component) =>
                            (component as UnityEngine.RectTransform).right
                    },
                    {
                        "up",
                        (component) =>
                            (component as UnityEngine.RectTransform).up
                    },
                    {
                        "forward",
                        (component) =>
                            (component as UnityEngine.RectTransform).forward
                    },
                    {
                        "rotation",
                        (component) =>
                            (component as UnityEngine.RectTransform).rotation
                    },
                    {
                        "localRotation",
                        (component) =>
                            (component as UnityEngine.RectTransform)
                            .localRotation
                    },
                    {
                        "localScale",
                        (component) =>
                            (component as UnityEngine.RectTransform).localScale
                    },
                    {
                        "parent",
                        (component) =>
                            (component as UnityEngine.RectTransform).parent
                    },
                    {
                        "hasChanged",
                        (component) =>
                            (component as UnityEngine.RectTransform).hasChanged
                    },
                    {
                        "hierarchyCapacity",
                        (component) =>
                            (component as UnityEngine.RectTransform)
                            .hierarchyCapacity
                    },
                    {
                        "tag",
                        (component) =>
                            (component as UnityEngine.RectTransform).tag
                    },
                    {
                        "name",
                        (component) =>
                            (component as UnityEngine.RectTransform).name
                    },
                    {
                        "hideFlags",
                        (component) =>
                            (component as UnityEngine.RectTransform).hideFlags
                    }
                }

                #endregion
            },

            {
                #region UnityEngine.Transform

                typeof(UnityEngine.Transform),
                new Dictionary<string, Func<object, object>>
                {

                    {
                        "position",
                        (component) =>
                            (component as UnityEngine.Transform).position
                    },
                    {
                        "localPosition",
                        (component) =>
                            (component as UnityEngine.Transform).localPosition
                    },
                    {
                        "eulerAngles",
                        (component) =>
                            (component as UnityEngine.Transform).eulerAngles
                    },
                    {
                        "localEulerAngles",
                        (component) =>
                            (component as UnityEngine.Transform)
                            .localEulerAngles
                    },
                    {
                        "right",
                        (component) =>
                            (component as UnityEngine.Transform).right
                    },
                    {
                        "up",
                        (component) =>
                            (component as UnityEngine.Transform).up
                    },
                    {
                        "forward",
                        (component) =>
                            (component as UnityEngine.Transform).forward
                    },
                    {
                        "rotation",
                        (component) =>
                            (component as UnityEngine.Transform).rotation
                    },
                    {
                        "localRotation",
                        (component) =>
                            (component as UnityEngine.Transform).localRotation
                    },
                    {
                        "localScale",
                        (component) =>
                            (component as UnityEngine.Transform).localScale
                    },
                    {
                        "parent",
                        (component) =>
                            (component as UnityEngine.Transform).parent
                    },
                    {
                        "hasChanged",
                        (component) =>
                            (component as UnityEngine.Transform).hasChanged
                    },
                    {
                        "hierarchyCapacity",
                        (component) =>
                            (component as UnityEngine.Transform)
                            .hierarchyCapacity
                    },
                    {
                        "tag",
                        (component) =>
                            (component as UnityEngine.Transform).tag
                    },
                    {
                        "name",
                        (component) =>
                            (component as UnityEngine.Transform).name
                    },
                    {
                        "hideFlags",
                        (component) =>
                            (component as UnityEngine.Transform).hideFlags
                    }
                }

                #endregion
            },

            {
                #region UnityEngine.UI.Image

                typeof(UnityEngine.UI.Image),
                new Dictionary<string, Func<object, object>>
                {

                    {
                        "sprite",
                        (component) =>
                            (component as UnityEngine.UI.Image).sprite
                    },
                    {
                        "overrideSprite",
                        (component) =>
                            (component as UnityEngine.UI.Image).overrideSprite
                    },
                    {
                        "type",
                        (component) =>
                            (component as UnityEngine.UI.Image).type
                    },
                    {
                        "preserveAspect",
                        (component) =>
                            (component as UnityEngine.UI.Image).preserveAspect
                    },
                    {
                        "fillCenter",
                        (component) =>
                            (component as UnityEngine.UI.Image).fillCenter
                    },
                    {
                        "fillMethod",
                        (component) =>
                            (component as UnityEngine.UI.Image).fillMethod
                    },
                    {
                        "fillAmount",
                        (component) =>
                            (component as UnityEngine.UI.Image).fillAmount
                    },
                    {
                        "fillClockwise",
                        (component) =>
                            (component as UnityEngine.UI.Image).fillClockwise
                    },
                    {
                        "fillOrigin",
                        (component) =>
                            (component as UnityEngine.UI.Image).fillOrigin
                    },
                    {
                        "alphaHitTestMinimumThreshold",
                        (component) =>
                            (component as UnityEngine.UI.Image)
                            .alphaHitTestMinimumThreshold
                    },
                    {
                        "useSpriteMesh",
                        (component) =>
                            (component as UnityEngine.UI.Image).useSpriteMesh
                    },
                    {
                        "pixelsPerUnitMultiplier",
                        (component) =>
                            (component as UnityEngine.UI.Image)
                            .pixelsPerUnitMultiplier
                    },
                    {
                        "material",
                        (component) =>
                            (component as UnityEngine.UI.Image).material
                    },
                    {
                        "onCullStateChanged",
                        (component) =>
                            (component as UnityEngine.UI.Image)
                            .onCullStateChanged
                    },
                    {
                        "maskable",
                        (component) =>
                            (component as UnityEngine.UI.Image).maskable
                    },
                    {
                        "isMaskingGraphic",
                        (component) =>
                            (component as UnityEngine.UI.Image).isMaskingGraphic
                    },
                    {
                        "color",
                        (component) =>
                            (component as UnityEngine.UI.Image).color
                    },
                    {
                        "raycastTarget",
                        (component) =>
                            (component as UnityEngine.UI.Image).raycastTarget
                    },
                    {
                        "raycastPadding",
                        (component) =>
                            (component as UnityEngine.UI.Image).raycastPadding
                    },
                    {
                        "useGUILayout",
                        (component) =>
                            (component as UnityEngine.UI.Image).useGUILayout
                    },
                    {
                        "runInEditMode",
                        (component) =>
                            (component as UnityEngine.UI.Image).runInEditMode
                    },
                    {
                        "enabled",
                        (component) =>
                            (component as UnityEngine.UI.Image).enabled
                    },
                    {
                        "tag",
                        (component) =>
                            (component as UnityEngine.UI.Image).tag
                    },
                    {
                        "name",
                        (component) =>
                            (component as UnityEngine.UI.Image).name
                    },
                    {
                        "hideFlags",
                        (component) =>
                            (component as UnityEngine.UI.Image).hideFlags
                    }
                }

                #endregion
            }
        };

        #region Methods

#if UNITY_EDITOR

        /// <summary>
        /// Resets the componentRegistry file.
        /// </summary>
        public static void Reset()
        {
            BricksBucket.Core.Generics.Editor.HardwiredFileWriter.ResetFile(
                new HardwiredComponents());
        }

        /// <summary>
        /// Rebuilds the componentRegistry file.
        /// </summary>
        public static void Rebuild()
        {
            BricksBucket.Core.Generics.Editor.HardwiredFileWriter.ReWriteFile(
                new HardwiredComponents());
        }

#endif

        #endregion

    }

}