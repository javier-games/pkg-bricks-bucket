using System;
using System.Collections.Generic;

// ReSharper disable PossibleNullReferenceException
// ReSharper disable BuiltInTypeReferenceStyle
// ReSharper disable UnusedMember.Local
// ReSharper disable RedundantNameQualifier

namespace Monogum.BricksBucket.Core.Examples.DynamicProperties
{
	/// <summary>
	/// Registered types.
	/// 
	/// Since iOS cannot support System.Reflection, AbstractReference has to
	/// have this static class to cast values.
	/// 
	/// 
	/// <autogenerated>
	/// 
	/// This code was generated by a tool.
	/// Changes to this file may cause incorrect behavior and will
	/// be lost if the code is regenerated.
	/// 
	/// </autogenerated>
	/// 
	/// ----------------------------------------------------------
	/// Code generated on Thursday, January 14, 2021 4:21:13 PM
	/// ----------------------------------------------------------
	///
	/// By Javier Garc√≠a.
	/// </summary>
    public sealed class HardwiredComponents : Monogum.BricksBucket.Core.Generics.AbstractComponentRegistry
	{
		/// <inheritdoc cref="Monogum.BricksBucket.Core.Generics.AbstractComponentRegistry.NameSpace"/>
		public override string NameSpace => "Monogum.BricksBucket.Core.Examples.DynamicProperties";

        /// <inheritdoc cref="Monogum.BricksBucket.Core.Generics.AbstractComponentRegistry.Path"/>
        public override string Path => "BricksBucket/Core/Examples/DynamicValues/Scripts";

		/// <inheritdoc cref="Monogum.BricksBucket.Core.Generics.AbstractComponentRegistry.ClassName"/>
		public override string ClassName => "HardwiredComponents";

        /// <inheritdoc cref="Monogum.BricksBucket.Core.Generics.AbstractComponentRegistry.Extension"/>
        public override string Extension => "cs";

		/// <inheritdoc cref="Monogum.BricksBucket.Core.Generics.AbstractComponentRegistry.ComponentTypesList"/>
        protected override List<Type> ComponentTypesList { get; } = 
            new List<Type>
		{
            
            typeof(UnityEngine.GameObject),

            typeof(UnityEngine.Light),

            typeof(UnityEngine.Transform)
        };

		/// <inheritdoc cref="Monogum.BricksBucket.Core.Generics.AbstractComponentRegistry.Set"/>
        protected override
			Dictionary<string, Dictionary<string, Action<object, object>>> Set
		{
			get;
		} = new Dictionary<string, Dictionary<string, Action<object, object>>>
        {
                            
            {
				#region UnityEngine.GameObject

                "UnityEngine.GameObject",
                new Dictionary<string, Action<object, object>>
                {
                    
                    {
                        "layer",
                        (component, value) =>
                            (component as UnityEngine.GameObject).layer =
                                (System.Int32) value
                    },
                    {
                        "isStatic",
                        (component, value) =>
                            (component as UnityEngine.GameObject).isStatic =
                                (System.Boolean) value
                    },
                    {
                        "tag",
                        (component, value) =>
                            (component as UnityEngine.GameObject).tag =
                                (System.String) value
                    },
                    {
                        "name",
                        (component, value) =>
                            (component as UnityEngine.GameObject).name =
                                (System.String) value
                    },
                    {
                        "hideFlags",
                        (component, value) =>
                            (component as UnityEngine.GameObject).hideFlags =
                                (UnityEngine.HideFlags) value
                    }
                }

                #endregion
            },
                
            {
				#region UnityEngine.Light

                "UnityEngine.Light",
                new Dictionary<string, Action<object, object>>
                {
                    
                    {
                        "type",
                        (component, value) =>
                            (component as UnityEngine.Light).type =
                                (UnityEngine.LightType) value
                    },
                    {
                        "shape",
                        (component, value) =>
                            (component as UnityEngine.Light).shape =
                                (UnityEngine.LightShape) value
                    },
                    {
                        "spotAngle",
                        (component, value) =>
                            (component as UnityEngine.Light).spotAngle =
                                (System.Single) value
                    },
                    {
                        "innerSpotAngle",
                        (component, value) =>
                            (component as UnityEngine.Light).innerSpotAngle =
                                (System.Single) value
                    },
                    {
                        "color",
                        (component, value) =>
                            (component as UnityEngine.Light).color =
                                (UnityEngine.Color) value
                    },
                    {
                        "colorTemperature",
                        (component, value) =>
                            (component as UnityEngine.Light).colorTemperature =
                                (System.Single) value
                    },
                    {
                        "useColorTemperature",
                        (component, value) =>
                            (component as UnityEngine.Light).useColorTemperature =
                                (System.Boolean) value
                    },
                    {
                        "intensity",
                        (component, value) =>
                            (component as UnityEngine.Light).intensity =
                                (System.Single) value
                    },
                    {
                        "bounceIntensity",
                        (component, value) =>
                            (component as UnityEngine.Light).bounceIntensity =
                                (System.Single) value
                    },
                    {
                        "useBoundingSphereOverride",
                        (component, value) =>
                            (component as UnityEngine.Light).useBoundingSphereOverride =
                                (System.Boolean) value
                    },
                    {
                        "boundingSphereOverride",
                        (component, value) =>
                            (component as UnityEngine.Light).boundingSphereOverride =
                                (UnityEngine.Vector4) value
                    },
                    {
                        "useViewFrustumForShadowCasterCull",
                        (component, value) =>
                            (component as UnityEngine.Light).useViewFrustumForShadowCasterCull =
                                (System.Boolean) value
                    },
                    {
                        "shadowCustomResolution",
                        (component, value) =>
                            (component as UnityEngine.Light).shadowCustomResolution =
                                (System.Int32) value
                    },
                    {
                        "shadowBias",
                        (component, value) =>
                            (component as UnityEngine.Light).shadowBias =
                                (System.Single) value
                    },
                    {
                        "shadowNormalBias",
                        (component, value) =>
                            (component as UnityEngine.Light).shadowNormalBias =
                                (System.Single) value
                    },
                    {
                        "shadowNearPlane",
                        (component, value) =>
                            (component as UnityEngine.Light).shadowNearPlane =
                                (System.Single) value
                    },
                    {
                        "useShadowMatrixOverride",
                        (component, value) =>
                            (component as UnityEngine.Light).useShadowMatrixOverride =
                                (System.Boolean) value
                    },
                    {
                        "shadowMatrixOverride",
                        (component, value) =>
                            (component as UnityEngine.Light).shadowMatrixOverride =
                                (UnityEngine.Matrix4x4) value
                    },
                    {
                        "range",
                        (component, value) =>
                            (component as UnityEngine.Light).range =
                                (System.Single) value
                    },
                    {
                        "flare",
                        (component, value) =>
                            (component as UnityEngine.Light).flare =
                                (UnityEngine.Flare) value
                    },
                    {
                        "bakingOutput",
                        (component, value) =>
                            (component as UnityEngine.Light).bakingOutput =
                                (UnityEngine.LightBakingOutput) value
                    },
                    {
                        "cullingMask",
                        (component, value) =>
                            (component as UnityEngine.Light).cullingMask =
                                (System.Int32) value
                    },
                    {
                        "renderingLayerMask",
                        (component, value) =>
                            (component as UnityEngine.Light).renderingLayerMask =
                                (System.Int32) value
                    },
                    {
                        "lightShadowCasterMode",
                        (component, value) =>
                            (component as UnityEngine.Light).lightShadowCasterMode =
                                (UnityEngine.LightShadowCasterMode) value
                    },
                    {
                        "shadowRadius",
                        (component, value) =>
                            (component as UnityEngine.Light).shadowRadius =
                                (System.Single) value
                    },
                    {
                        "shadowAngle",
                        (component, value) =>
                            (component as UnityEngine.Light).shadowAngle =
                                (System.Single) value
                    },
                    {
                        "shadows",
                        (component, value) =>
                            (component as UnityEngine.Light).shadows =
                                (UnityEngine.LightShadows) value
                    },
                    {
                        "shadowStrength",
                        (component, value) =>
                            (component as UnityEngine.Light).shadowStrength =
                                (System.Single) value
                    },
                    {
                        "shadowResolution",
                        (component, value) =>
                            (component as UnityEngine.Light).shadowResolution =
                                (UnityEngine.Rendering.LightShadowResolution) value
                    },
                    {
                        "layerShadowCullDistances",
                        (component, value) =>
                            (component as UnityEngine.Light).layerShadowCullDistances =
                                (System.Single[]) value
                    },
                    {
                        "cookieSize",
                        (component, value) =>
                            (component as UnityEngine.Light).cookieSize =
                                (System.Single) value
                    },
                    {
                        "cookie",
                        (component, value) =>
                            (component as UnityEngine.Light).cookie =
                                (UnityEngine.Texture) value
                    },
                    {
                        "renderMode",
                        (component, value) =>
                            (component as UnityEngine.Light).renderMode =
                                (UnityEngine.LightRenderMode) value
                    },
                    {
                        "areaSize",
                        (component, value) =>
                            (component as UnityEngine.Light).areaSize =
                                (UnityEngine.Vector2) value
                    },
                    {
                        "lightmapBakeType",
                        (component, value) =>
                            (component as UnityEngine.Light).lightmapBakeType =
                                (UnityEngine.LightmapBakeType) value
                    },
                    {
                        "enabled",
                        (component, value) =>
                            (component as UnityEngine.Light).enabled =
                                (System.Boolean) value
                    },
                    {
                        "tag",
                        (component, value) =>
                            (component as UnityEngine.Light).tag =
                                (System.String) value
                    },
                    {
                        "name",
                        (component, value) =>
                            (component as UnityEngine.Light).name =
                                (System.String) value
                    },
                    {
                        "hideFlags",
                        (component, value) =>
                            (component as UnityEngine.Light).hideFlags =
                                (UnityEngine.HideFlags) value
                    }
                }

                #endregion
            },
                
            {
				#region UnityEngine.Transform

                "UnityEngine.Transform",
                new Dictionary<string, Action<object, object>>
                {
                    
                    {
                        "position",
                        (component, value) =>
                            (component as UnityEngine.Transform).position =
                                (UnityEngine.Vector3) value
                    },
                    {
                        "localPosition",
                        (component, value) =>
                            (component as UnityEngine.Transform).localPosition =
                                (UnityEngine.Vector3) value
                    },
                    {
                        "eulerAngles",
                        (component, value) =>
                            (component as UnityEngine.Transform).eulerAngles =
                                (UnityEngine.Vector3) value
                    },
                    {
                        "localEulerAngles",
                        (component, value) =>
                            (component as UnityEngine.Transform).localEulerAngles =
                                (UnityEngine.Vector3) value
                    },
                    {
                        "right",
                        (component, value) =>
                            (component as UnityEngine.Transform).right =
                                (UnityEngine.Vector3) value
                    },
                    {
                        "up",
                        (component, value) =>
                            (component as UnityEngine.Transform).up =
                                (UnityEngine.Vector3) value
                    },
                    {
                        "forward",
                        (component, value) =>
                            (component as UnityEngine.Transform).forward =
                                (UnityEngine.Vector3) value
                    },
                    {
                        "rotation",
                        (component, value) =>
                            (component as UnityEngine.Transform).rotation =
                                (UnityEngine.Quaternion) value
                    },
                    {
                        "localRotation",
                        (component, value) =>
                            (component as UnityEngine.Transform).localRotation =
                                (UnityEngine.Quaternion) value
                    },
                    {
                        "localScale",
                        (component, value) =>
                            (component as UnityEngine.Transform).localScale =
                                (UnityEngine.Vector3) value
                    },
                    {
                        "parent",
                        (component, value) =>
                            (component as UnityEngine.Transform).parent =
                                (UnityEngine.Transform) value
                    },
                    {
                        "hasChanged",
                        (component, value) =>
                            (component as UnityEngine.Transform).hasChanged =
                                (System.Boolean) value
                    },
                    {
                        "hierarchyCapacity",
                        (component, value) =>
                            (component as UnityEngine.Transform).hierarchyCapacity =
                                (System.Int32) value
                    },
                    {
                        "tag",
                        (component, value) =>
                            (component as UnityEngine.Transform).tag =
                                (System.String) value
                    },
                    {
                        "name",
                        (component, value) =>
                            (component as UnityEngine.Transform).name =
                                (System.String) value
                    },
                    {
                        "hideFlags",
                        (component, value) =>
                            (component as UnityEngine.Transform).hideFlags =
                                (UnityEngine.HideFlags) value
                    }
                }

                #endregion
            }
		};

		/// <inheritdoc cref="Monogum.BricksBucket.Core.Generics.AbstractComponentRegistry.Get"/>
        protected override
			Dictionary<string, Dictionary<string, Func<object, object>>> Get
		{
			get;
		} = new Dictionary<string, Dictionary<string, Func<object, object>>>
		{
                            
            {
				#region UnityEngine.GameObject

                "UnityEngine.GameObject",
                new Dictionary<string, Func<object, object>>
                {
                    
                    {
                        "layer",
                        (component) =>
                            (component as UnityEngine.GameObject).layer
                    },
                    {
                        "isStatic",
                        (component) =>
                            (component as UnityEngine.GameObject).isStatic
                    },
                    {
                        "tag",
                        (component) =>
                            (component as UnityEngine.GameObject).tag
                    },
                    {
                        "name",
                        (component) =>
                            (component as UnityEngine.GameObject).name
                    },
                    {
                        "hideFlags",
                        (component) =>
                            (component as UnityEngine.GameObject).hideFlags
                    }
                }

                #endregion
            },
                
            {
				#region UnityEngine.Light

                "UnityEngine.Light",
                new Dictionary<string, Func<object, object>>
                {
                    
                    {
                        "type",
                        (component) =>
                            (component as UnityEngine.Light).type
                    },
                    {
                        "shape",
                        (component) =>
                            (component as UnityEngine.Light).shape
                    },
                    {
                        "spotAngle",
                        (component) =>
                            (component as UnityEngine.Light).spotAngle
                    },
                    {
                        "innerSpotAngle",
                        (component) =>
                            (component as UnityEngine.Light).innerSpotAngle
                    },
                    {
                        "color",
                        (component) =>
                            (component as UnityEngine.Light).color
                    },
                    {
                        "colorTemperature",
                        (component) =>
                            (component as UnityEngine.Light).colorTemperature
                    },
                    {
                        "useColorTemperature",
                        (component) =>
                            (component as UnityEngine.Light).useColorTemperature
                    },
                    {
                        "intensity",
                        (component) =>
                            (component as UnityEngine.Light).intensity
                    },
                    {
                        "bounceIntensity",
                        (component) =>
                            (component as UnityEngine.Light).bounceIntensity
                    },
                    {
                        "useBoundingSphereOverride",
                        (component) =>
                            (component as UnityEngine.Light).useBoundingSphereOverride
                    },
                    {
                        "boundingSphereOverride",
                        (component) =>
                            (component as UnityEngine.Light).boundingSphereOverride
                    },
                    {
                        "useViewFrustumForShadowCasterCull",
                        (component) =>
                            (component as UnityEngine.Light).useViewFrustumForShadowCasterCull
                    },
                    {
                        "shadowCustomResolution",
                        (component) =>
                            (component as UnityEngine.Light).shadowCustomResolution
                    },
                    {
                        "shadowBias",
                        (component) =>
                            (component as UnityEngine.Light).shadowBias
                    },
                    {
                        "shadowNormalBias",
                        (component) =>
                            (component as UnityEngine.Light).shadowNormalBias
                    },
                    {
                        "shadowNearPlane",
                        (component) =>
                            (component as UnityEngine.Light).shadowNearPlane
                    },
                    {
                        "useShadowMatrixOverride",
                        (component) =>
                            (component as UnityEngine.Light).useShadowMatrixOverride
                    },
                    {
                        "shadowMatrixOverride",
                        (component) =>
                            (component as UnityEngine.Light).shadowMatrixOverride
                    },
                    {
                        "range",
                        (component) =>
                            (component as UnityEngine.Light).range
                    },
                    {
                        "flare",
                        (component) =>
                            (component as UnityEngine.Light).flare
                    },
                    {
                        "bakingOutput",
                        (component) =>
                            (component as UnityEngine.Light).bakingOutput
                    },
                    {
                        "cullingMask",
                        (component) =>
                            (component as UnityEngine.Light).cullingMask
                    },
                    {
                        "renderingLayerMask",
                        (component) =>
                            (component as UnityEngine.Light).renderingLayerMask
                    },
                    {
                        "lightShadowCasterMode",
                        (component) =>
                            (component as UnityEngine.Light).lightShadowCasterMode
                    },
                    {
                        "shadowRadius",
                        (component) =>
                            (component as UnityEngine.Light).shadowRadius
                    },
                    {
                        "shadowAngle",
                        (component) =>
                            (component as UnityEngine.Light).shadowAngle
                    },
                    {
                        "shadows",
                        (component) =>
                            (component as UnityEngine.Light).shadows
                    },
                    {
                        "shadowStrength",
                        (component) =>
                            (component as UnityEngine.Light).shadowStrength
                    },
                    {
                        "shadowResolution",
                        (component) =>
                            (component as UnityEngine.Light).shadowResolution
                    },
                    {
                        "layerShadowCullDistances",
                        (component) =>
                            (component as UnityEngine.Light).layerShadowCullDistances
                    },
                    {
                        "cookieSize",
                        (component) =>
                            (component as UnityEngine.Light).cookieSize
                    },
                    {
                        "cookie",
                        (component) =>
                            (component as UnityEngine.Light).cookie
                    },
                    {
                        "renderMode",
                        (component) =>
                            (component as UnityEngine.Light).renderMode
                    },
                    {
                        "areaSize",
                        (component) =>
                            (component as UnityEngine.Light).areaSize
                    },
                    {
                        "lightmapBakeType",
                        (component) =>
                            (component as UnityEngine.Light).lightmapBakeType
                    },
                    {
                        "enabled",
                        (component) =>
                            (component as UnityEngine.Light).enabled
                    },
                    {
                        "tag",
                        (component) =>
                            (component as UnityEngine.Light).tag
                    },
                    {
                        "name",
                        (component) =>
                            (component as UnityEngine.Light).name
                    },
                    {
                        "hideFlags",
                        (component) =>
                            (component as UnityEngine.Light).hideFlags
                    }
                }

                #endregion
            },
                
            {
				#region UnityEngine.Transform

                "UnityEngine.Transform",
                new Dictionary<string, Func<object, object>>
                {
                    
                    {
                        "position",
                        (component) =>
                            (component as UnityEngine.Transform).position
                    },
                    {
                        "localPosition",
                        (component) =>
                            (component as UnityEngine.Transform).localPosition
                    },
                    {
                        "eulerAngles",
                        (component) =>
                            (component as UnityEngine.Transform).eulerAngles
                    },
                    {
                        "localEulerAngles",
                        (component) =>
                            (component as UnityEngine.Transform).localEulerAngles
                    },
                    {
                        "right",
                        (component) =>
                            (component as UnityEngine.Transform).right
                    },
                    {
                        "up",
                        (component) =>
                            (component as UnityEngine.Transform).up
                    },
                    {
                        "forward",
                        (component) =>
                            (component as UnityEngine.Transform).forward
                    },
                    {
                        "rotation",
                        (component) =>
                            (component as UnityEngine.Transform).rotation
                    },
                    {
                        "localRotation",
                        (component) =>
                            (component as UnityEngine.Transform).localRotation
                    },
                    {
                        "localScale",
                        (component) =>
                            (component as UnityEngine.Transform).localScale
                    },
                    {
                        "parent",
                        (component) =>
                            (component as UnityEngine.Transform).parent
                    },
                    {
                        "hasChanged",
                        (component) =>
                            (component as UnityEngine.Transform).hasChanged
                    },
                    {
                        "hierarchyCapacity",
                        (component) =>
                            (component as UnityEngine.Transform).hierarchyCapacity
                    },
                    {
                        "tag",
                        (component) =>
                            (component as UnityEngine.Transform).tag
                    },
                    {
                        "name",
                        (component) =>
                            (component as UnityEngine.Transform).name
                    },
                    {
                        "hideFlags",
                        (component) =>
                            (component as UnityEngine.Transform).hideFlags
                    }
                }

                #endregion
            }
        };

        #region Methods
#if UNITY_EDITOR

        /// <summary>
        /// Rebuilds the componentRegistry file.
        /// </summary>
        [UnityEditor.MenuItem("Tools/BricksBucket/ComponentRegistry/Monogum.BricksBucket.Core.Examples.DynamicProperties HardwiredComponents/Rebuild")]
        public static void Rebuild()
        {
            Monogum.BricksBucket.Core.Generics.Editor.HardwiredFileWriter.ReWriteFile(new HardwiredComponents());
        }

        /// <summary>
        /// Resets the componentRegistry file.
        /// </summary>
        [UnityEditor.MenuItem("Tools/BricksBucket/ComponentRegistry/Monogum.BricksBucket.Core.Examples.DynamicProperties HardwiredComponents/Reset")]
        public static void Reset()
        {
            Monogum.BricksBucket.Core.Generics.Editor.HardwiredFileWriter.ResetFile(new HardwiredComponents());
        }
        
#endif
        #endregion

    }

}